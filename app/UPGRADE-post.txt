select 'This is the auto-run upgrade script that converts the database from KB+ 4.1 to KB+ 4.2';

select 'Remove all occurrences of gokb namespace identifiers';


delete identifier_occurrence
from identifier_occurrence
join identifier on io_canonical_id = id_id
join identifier_namespace on id_ns_fk = idns_id
where idns_ns = 'gokbtitleid';

delete identifier_occurrence
from identifier_occurrence
join identifier on io_canonical_id = id_id
join identifier_namespace on id_ns_fk = idns_id
where idns_ns = 'uri';


select 'Remove all of gokb namespace identifiers';

delete identifier from identifier join identifier_namespace on id_ns_fk = idns_id where idns_ns = 'gokbtitleid';
delete identifier from identifier join identifier_namespace on id_ns_fk = idns_id where idns_ns = 'uri';

select 'Remove all identifers where the namespace is not present';
delete from identifier where not exists ( select idns_id from identifier_namespace where id_ns_fk = idns_id );

select 'Remove any JUSP fact rows which point to an identifier we are about to delete';
delete kbplus_fact from kbplus_fact join identifier_occurrence on io_id = juspio_id where not exists ( select id_id from identifier where io_canonical_id = id_id );

select 'Remove all identifier_occurrences where the identifier is not present';
delete from identifier_occurrence where not exists ( select id_id from identifier where io_canonical_id = id_id );

drop table if exists titles_to_remove;

create table titles_to_remove as select ti_id from title_instance where not exists ( select tipp_id from title_instance_package_platform where tipp_ti_fk = ti_id );

select count(*) from titles_to_remove;

select 'Remove any identifier_occurrences for titles which are to be deleted';
delete identifier_occurrence from identifier_occurrence join titles_to_remove on io_ti_fk = ti_id;

select 'Remove any org role rows relating to a title we want to delete in the next step';
delete from org_role where or_title_fk in ( select ti_id from titles_to_remove );

select 'Remove all titles without a package and without identifiers';
delete from title_instance where ti_id in (select ti_id from titles_to_remove);

drop table if exists titles_to_remove;

select 'Set up some MySQL Variables to hold the IDs of our custom property definitions';
SET @AlumniAccessPropDefId = null,
    @ConcurrentAccessPropDefId = null,
    @ConcurrentUsersPropDefId = null,
    @EnterpriseAccessPropDefId = null,
    @ILLPropDefId = null,
    @IncludeInCoursepacksPropDefId = null,
    @IncludeinVLEPropDefId = null,
    @MultiSiteAccessPropDefId = null,
    @PartnersAccessPropDefId = null,
    @PostCancellationAccessEntitlementPropDefId = null,
    @RemoteAccessPropDefId = null,
    @SignedPropDefId = null,
    @WalkInAccessPropDefId = null;

select 'Get IDs of known custom properties';

select @AlumniAccessPropDefId := pd_id from property_definition where pd_name = 'Alumni Access';
select @ConcurrentAccessPropDefId := pd_id from property_definition where pd_name = 'Concurrent Access';
select @ConcurrentUsersPropDefId := pd_id from property_definition where pd_name = 'Concurrent Users';
select @EnterpriseAccessPropDefId := pd_id from property_definition where pd_name = 'Enterprise Access';
select @ILLPropDefId := pd_id from property_definition where pd_name = 'ILL - InterLibraryLoans';
select @IncludeInCoursepacksPropDefId := pd_id from property_definition where pd_name = 'Include In Coursepacks';
select @IncludeinVLEPropDefId := pd_id from property_definition where pd_name = 'Include in VLE';
select @MultiSiteAccessPropDefId := pd_id from property_definition where pd_name = 'Multi Site Access';
select @PartnersAccessPropDefId := pd_id from property_definition where pd_name = 'Partners Access';
select @PostCancellationAccessEntitlementPropDefId := pd_id from property_definition where pd_name = 'Post Cancellation Access Entitlement';
select @RemoteAccessPropDefId := pd_id from property_definition where pd_name = 'Remote Access';
select @SignedPropDefId := pd_id from property_definition where pd_name = 'Signed';
select @WalkInAccessPropDefId := pd_id from property_definition where pd_name = 'Walk In Access';


select 'Select the current concurrent access property and create new custom propertie values for each license';

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_concurrent_users_rdv_fk, @ConcurrentAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'concurrentUsers' )
         left outer join doc on doc_id = dc_doc_fk;


insert into license_custom_property(version,owner_id, note, int_value, type_id) 
 select 0, lic_id, doc_content, lic_concurrent_user_count, @ConcurrentUsersPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'concurrentUsers' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_alumni_access_rdv_fk, @AlumniAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'alumniAccess' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_enterprise_rdv_fk, @EnterpriseAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'enterprise' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_ill_rdv_fk, @ILLPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'ill' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_coursepack_rdv_fk, @IncludeInCoursepacksPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'coursepack' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_vle_rdv_fk, @IncludeinVLEPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'vle' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_multisite_access_rdv_fk, @MultiSiteAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'multisiteAccess' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_partners_access_rdv_fk, @PartnersAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'partnersAccess' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_pca_rdv_fk, @PostCancellationAccessEntitlementPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'pca' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_remote_access_rdv_fk, @RemoteAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'remoteAccess' )
         left outer join doc on doc_id = dc_doc_fk;

insert into license_custom_property(version,owner_id, note, ref_value_id, type_id) 
 select 0, lic_id, doc_content, lic_walkin_access_rdv_fk, @WalkInAccessPropDefId 
   from license
       left outer join doc_context on ( dc_lic_fk = lic_id and domain = 'walkinAccess' )
         left outer join doc on doc_id = dc_doc_fk;

update identifier_namespace set idns_hide=1 where idns_ns ='originediturl';

delete from org_role where ( or_title_fk is not null ) and ( not exists ( select ti_id from title_instance where ti_id = or_title_fk ));

delete from title_instance_package_platform where ( tipp_ti_fk is not null ) and ( not exists ( select ti_id from title_instance where ti_id = tipp_ti_fk ));

delete from title_instance_package_platform where ( tipp_pkg_fk is not null ) and ( not exists ( select pkg_id from package where pkg_id = tipp_pkg_fk ));

update identifier set id_value = TRIM(id_value);

create table duplicate_identifiers as select id_ns_fk ns, id_value val, count(*) c, min(id_id) first from identifier group by id_ns_fk, id_value having count(*) > 1;

create table identifier_updates as
select id1.id_id id, id1.id_value value, id1.id_ns_fk ns, id2.first usethis
from identifier id1, 
     duplicate_identifiers id2 
where id1.id_value = id2.val 
  and id1.id_ns_fk = id2.ns
  and id1.id_id <> id2.first;

select 'Redirecting identifier_occurrences pointing to old identifiers to the first or canonical one';
update identifier_occurrence io join identifier_updates iu on io.io_canonical_id = iu.id set io.io_canonical_id = iu.usethis;

delete from identifier where id_id in ( select id from identifier_updates );

drop table if exists duplicate_identifiers;
drop table if exists identifier_updates;
